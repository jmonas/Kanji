import os
import xml.etree.ElementTree as ET
import cairosvg
import re
from PIL import Image
from io import BytesIO


# Function to convert SVG content to PNG image
def svg_to_png(svg_content, output_path, scale_factor=1.1745):
    original_width = 109  # Original width
    original_height = 109  # Original height

    # Scale the dimensions
    width = original_width * scale_factor
    height = original_height * scale_factor

    # Define the viewBox to scale the content
    viewBox = f"0 0 {original_width} {original_height}"

    # Define the full SVG content with the new width, height, and viewBox
    full_svg_content = f'<svg width="{width}px" height="{height}px" viewBox="{viewBox}" xmlns="http://www.w3.org/2000/svg" version="1.1">{svg_content}</svg>'
    
    # Convert the SVG to PNG
    png_data = cairosvg.svg2png(bytestring=full_svg_content.encode('utf-8'))
    # Use Pillow to open the PNG data generated by CairoSVG
    with Image.open(BytesIO(png_data)) as img:
        # Convert to 'LA' which keeps luminance (brightness) and alpha
        grayscale_alpha = img.convert("LA")

        # Create a new image with the same size as a grayscale image but white background
        black_white = Image.new('L', img.size, color='white')

        # Load pixel data
        grayscale_alpha_pixels = grayscale_alpha.load()
        black_white_pixels = black_white.load()

        # Set the value in black_white to black where the alpha of grayscale_alpha is not zero
        for y in range(img.size[1]):
            for x in range(img.size[0]):
                if grayscale_alpha_pixels[x, y][1] != 0:
                    black_white_pixels[x, y] = 0  # 0 is black in 'L' mode

        # Save the image
        black_white.save(output_path)
# Path to the XML file containing SVG elements
xml_file_path = 'kanjivg.xml'

# Directory where PNG files will be saved
png_directory = 'pngs'
os.makedirs(png_directory, exist_ok=True)

# Parse the XML file
tree = ET.parse(xml_file_path)
root = tree.getroot()

# Iterate over each kanji element and convert to PNG
for kanji in root.findall('.//kanji'):
    # Construct SVG content for this kanji
    kanji.set('fill', 'none')
    kanji.set('stroke', 'black')
    svg_content = ET.tostring(kanji, encoding='unicode')
    


    # Extract the kanji ID for the filename
    kanji_id = kanji.get('id').split(':')[-1]
    
    
    output_path = os.path.join(png_directory, f'{kanji_id}.png')
    # Convert the SVG to PNG
    svg_to_png(svg_content, output_path)

print("Conversion completed.")
